/* eslint-env mocha */
'use strict';

var assert = require('assert');
var browserify = require('../');
var path = require('path');
var reactify = require('reactify');
var vinylFile = require('vinyl-file');

function loadExpectedFile(relPath) {
  var base = 'result';
  var file = path.join(base, relPath);
  return vinylFile.readSync(file, {base: base});
}

function compare(actual, expected) {
  function removeSourceMappingURL(content) {
    return content
      .split('\n')
      .filter(function (line) {
        return line.indexOf('//# sourceMappingURL=') < 0;
      })
      .join('\n');
  }
  return assert.deepEqual(removeSourceMappingURL(actual),
                          removeSourceMappingURL(expected));
}

describe('compiling', function () {
  it('a single file', function (done) {
    browserify('source/single-file.js')
    .on('data', function (data) {
      compare(data.contents.toString(),
              loadExpectedFile('single-file.js').contents.toString());
    })
    .on('end', function () {
      done();
    });
  });

  it('multiple files', function (done) {
    browserify('source/*.js')
    .on('data', function (data) {
      compare(data.contents.toString(),
                       loadExpectedFile('multiple-file.js').contents.toString());
    })
    .on('end', function () {
      done();
    });
  });

  it('multiple files with an array', function (done) {
    browserify(['source/multiple-file.js', 'source/single-file.js'])
    .on('data', function (data) {
      compare(data.contents.toString(),
                       loadExpectedFile('multiple-file.js').contents.toString());
    })
    .on('end', function () {
      done();
    });
  });
});

describe('options', function () {
  it('output file name', function (done) {
    browserify('source/single-file.js', {
      outfile: 'app.js'
    })
    .on('data', function (data) {
      assert.equal(path.basename(data.path), 'app.js');
    })
    .on('end', function () {
      done();
    });
  });

  it('with transform', function (done) {
    browserify('source/jsx/react.js', {
      transform: [reactify]
    })
    .on('data', function (data) {
      compare(data.contents.toString(),
                       loadExpectedFile('react.js').contents.toString());
    })
    .on('end', function () {
      done();
    });
  });

  it('uglify', function (done) {
    browserify('source/single-file.js', {
      uglify: true
    })
    .on('data', function (data) {
      compare(data.contents.toString(),
                       loadExpectedFile('uglify.js').contents.toString());
    })
    .on('end', function () {
      done();
    });
  });
});
